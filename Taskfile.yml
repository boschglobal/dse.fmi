---
version: '3'

metadata:
  package:
    download: '{{.REPO}}/releases/download/v{{.TAG}}/Fmi-{{.TAG}}-{{.PLATFORM_ARCH}}.zip'
  container:
    repository: ghcr.io/boschglobal/dse-fmi
  models:
    dse.fmi.mcl:
      name: fmimcl
      displayName: dse.fmi.mcl
      path: fmimcl
      mcl: true
      workflows:
        - generate-fmimcl
        - generate-fmimodelc
        - generate-fmigateway
        - patch-signalgroup
      platforms:
        - linux-amd64
        - linux-x86
        - linux-i386
        - windows-x64
        - windows-x86
      channels:
        - alias: signal_channel
        - alias: network_channel

vars:
  # When running from E2E tests (i.e. Docker in Docker), the ENTRYDIR (for
  # Docker commands) must be set to the host relative path.
  ENTRYDIR: '{{if .SIM}}{{.ENTRYWORKDIR}}/{{.SIM}}{{else}}{{.PWD}}{{end}}'
  # Container image specification.
  FMI_IMAGE: '{{.FMI_IMAGE | default "ghcr.io/boschglobal/dse-fmi"}}'
  FMI_TAG: '{{if .FMI_TAG}}{{.FMI_TAG}}{{else}}{{if .IMAGE_TAG}}{{.IMAGE_TAG}}{{else}}latest{{end}}{{end}}'


tasks:

  generate-fmimcl:
    desc: Generate an FMI MCL from an existing FMU.
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:generate-fmimcl
    vars:
      #FMU_DIR: '{{.FMU_DIR}}'
      OUT_DIR: '{{.OUT_DIR | default "out/model"}}'
      #MCL_PATH: '{{.MCL_PATH}}'
      FMU_MODELDESC: '{{.FMU_DIR}}/modelDescription.xml'
      SIGNAL_GROUP: "{{if .SIGNAL_GROUP}}'{{.SIGNAL_GROUP}}'{{else}}'{{.OUT_DIR}}/signalgroup.yaml'{{end}}"
    env:
     FMU_DIR: '{{.FMU_DIR}}'
    cmds:
      - env | sort
      - task: gen-mcl
        vars:
          FMU_DIR: '{{.FMU_DIR}}'
          OUT_DIR: '{{.OUT_DIR}}'
          MCL_PATH: '{{.MCL_PATH}}'
      - task: gen-signalgroup
        vars:
          INPUT: '{{.FMU_MODELDESC}}'
          OUTPUT: '{{.SIGNAL_GROUP}}'
    requires:
      vars: [FMU_DIR, MCL_PATH]
    metadata:
      vars:
        FMU_DIR:
          required: true
          hint: URI identifying an FMU (select from 'uses' or manually enter a path).
        OUT_DIR:
          required: true
          hint: Directory where the model should be created (sim relative).
          default: out/model
        MCL_PATH:
          required: true
          hint: Path where the FMI MCL shared library is located.
        FMU_MODELDESC:
          required: false
          hint: Path where the FMI modelDescription.xml should be created.
          default: '{{.FMU_DIR}}/modelDescription.xml'
        SIGNAL_GROUP:
          required: false
          hint: Path where the associated Signal Group should be created.
          default: '{{.OUT_DIR}}/signalgroup.yaml'
      generates:
        - data/model.yaml
        - data/signalgroup.yaml

  generate-fmimodelc:
    desc: Generate a FMI ModelC FMU from an existing (DSE/ModelC) Simer simulation.
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:generate-fmimodelc
    cmds:
      - task: gen-fmu
    requires:
      vars: [SIM, FMU_NAME]
    metadata:
      vars:
        SIM:
          required: true
          hint: URI identifying the simulation (Simer layout) to be packaged as an FMU.
        FMU_NAME:
          required: true
          hint: Name of the generated FMU.
        PLATFORM:
          required: false
          hint: Selected platform of the generated FMU.
        SIGNAL_GROUPS:
          required: false
          hint:
          default:
        VERSION:
          required: false
          hint: Version of the generated FMU.
        UUID:
          required: false
          hint: UUID of the generated FMU.
        OUT_DIR:
          required: false
          hint: Path where the FMU should be created.
          default: out

  generate-fmigateway:
    desc: Generate a FMI Gateway FMU from existing Signal Groups.
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:generate-fmigateway
    cmds:
      - task: gen-gateway

  gen-mcl:
    internal: true
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-mcl
    vars:
      #FMU_DIR: '{{.FMU_DIR}}'
      OUT_DIR: '{{.OUT_DIR | default "out/model"}}'
      #MCL_PATH: '{{.MCL_PATH}}'
      PLATFORM: "{{if .PLATFORM}}--platform '{{.PLATFORM}}'{{else}}{{end}}"
    cmds:
      - docker run --rm
          -v {{.ENTRYDIR}}:/sim
          {{.FMI_IMAGE}}:{{.FMI_TAG}}
          gen-mcl
            --fmu {{.FMU_DIR}}
            --outdir {{.OUT_DIR}}
            --mcl {{.MCL_PATH}}
            {{.PLATFORM}}
    requires:
      vars: [FMU_DIR, MCL_PATH]

  gen-signalgroup:
    internal: true
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-signalgroup
    vars: {}
      #INPUT: '{{.INPUT}}'
      #OUTPUT: '{{.OUTPUT}}'
    cmds:
      - docker run --rm
          -v {{.ENTRYDIR}}:/sim
          {{.FMI_IMAGE}}:{{.FMI_TAG}}
          gen-signalgroup
            --input {{.INPUT}}
            --output {{.OUTPUT}}
    requires:
      vars: [INPUT, OUTPUT]

  gen-fmu:
    internal: true
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-fmu
    vars:
      #SIM: '{{.SIM}}'
      #FMU_NAME: '{{.FMU_NAME}}'
      PLATFORM: "{{if .PLATFORM}}--platform '{{.PLATFORM}}'{{else}}{{end}}"
      SIGNAL_GROUPS: "{{if .SIGNAL_GROUPS}}--signalgroups '{{.SIGNAL_GROUPS}}'{{else}}{{end}}"
      VERSION: "{{if .VERSION}}--version '{{.VERSION}}'{{else}}{{end}}"
      UUID: "{{if .UUID}}--uuid '{{.UUID}}'{{else}}{{end}}"
      FMIVERSION: "{{if .FMIVERSION}}--fmiVersion '{{.FMIVERSION}}'{{else}}{{end}}"
      OUT_DIR: '{{.OUT_DIR | default "out"}}'
    cmds:
      - docker run --rm
          -v {{.ENTRYDIR}}:/sim
          {{.FMI_IMAGE}}:{{.FMI_TAG}}
          gen-fmu
            --sim {{.SIM}}
            --name {{.FMU_NAME}}
            --outdir {{.OUT_DIR}}
            {{.PLATFORM}}
            {{.SIGNAL_GROUPS}}
            {{.VERSION}}
            {{.UUID}}
            {{.FMIVERSION}}
    requires:
      vars: [SIM, FMU_NAME]

  gen-gateway:
    internal: true
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-gateway
    vars:
      #SIGNAL_GROUPS: '{{.SIGNAL_GROUPS}}'
      OUT_DIR: '{{.OUT_DIR | default "out"}}'
      SESSION: "{{if .SESSION}}--session '{{.SESSION}}'{{else}}{{end}}"
      VERSION: "{{if .VERSION}}--version '{{.VERSION}}'{{else}}{{end}}"
      FMI_VERSION: "{{if .FMIVERSION}}--fmiVersion '{{.FMIVERSION}}'{{else}}{{end}}"
      UUID: "{{if .UUID}}--uuid '{{.UUID}}'{{else}}{{end}}"
    cmds:
      - docker run --rm
          -v {{.ENTRYDIR}}:/sim
          {{.FMI_IMAGE}}:{{.FMI_TAG}}
          gen-gateway
            --signalgroups {{.SIGNAL_GROUPS}}
            --outdir {{.OUT_DIR}}
            {{.SESSION}}
            {{.VERSION}}
            {{.FMI_VERSION}}
            {{.UUID}}
    requires:
      vars: [SIGNAL_GROUPS]

  patch-signalgroup:
    desc: Patch changes into a generated Signal Group.
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:patch-signalgroup
    vars:
      #INPUT: '{{.INPUT}}'
      #PATCH: '{{.PATCH}}'
      REMOVE_UNKNOWN: '{{if .REMOVE_UNKNOWN}}--remove-unknown{{else}}{{end}}'
    cmds:
      - docker run --rm
          -v {{.ENTRYDIR}}:/sim
          {{.FMI_IMAGE}}:{{.FMI_TAG}}
          patch-signalgroup
            --input {{.INPUT}}
            --patch {{.PATCH}}
            {{.REMOVE_UNKNOWN}}
    requires:
      vars: [INPUT, PATCH]
    metadata:
      vars:
        INPUT:
          required: true
          hint: Path identifying the Signal Group to be patched.
        PATCH:
          required: true
          hint: URI identifying the patch file to use.
        REMOVE_UNKNOWN:
          required: false
          hint: Remove unknown items (i.e. not in the patch file).
