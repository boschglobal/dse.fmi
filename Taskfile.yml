version: '3'

vars:
  FMI_IMAGE: '{{.FMI_IMAGE | default "ghcr.io/boschglobal/dse-fmi"}}'
  FMI_TAG: '{{.FMI_TAG | default "latest"}}'

tasks:

  generate-fmimcl:
    desc: Generate an FMI MCL from an existing FMU.
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:generate-fmimcl
    vars:
      INPUT: '{{.INPUT | default "INPUT_NOT_SPECIFIED"}}'
      OUTPUT: '{{.OUTPUT | default "OUTPUT_NOT_SPECIFIED"}}'
      SIGNALGROUP: '{{.SIGNALGROUP | default "SIGNALGROUP_NOT_SPECIFIED"}}'
    cmds:
      - task: gen-mcl
        vars:
          INPUT: '{{.INPUT}}'
          OUTPUT: '{{.OUTPUT}}'
      - task: gen-signalgroup
        vars:
          INPUT: '{{.INPUT}}'
          OUTPUT: '{{.SIGNALGROUP}}'
    requires:
      vars: [INPUT, OUTPUT, SIGNALGROUP]

  generate-fmimodelc:
    desc: Generate a FMI ModelC FMU from an existing (DSE/ModelC) Simer simulation.
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:generate-fmimodelc
    cmds:
      - task: gen-fmu

  gen-mcl:
    internal: true
    run: when_changed
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-mcl-{{.OUTPUT}}
    vars:
      INPUT: '{{.INPUT | default "INPUT_NOT_SPECIFIED"}}'
      OUTPUT: '{{.OUTPUT | default "OUTPUT_NOT_SPECIFIED"}}'
      LABELS: '{{.LABELS | default "{}"}}'
      OS: '{{.OS | default "linux"}}'
      ARCH: '{{.ARCH | default "amd64"}}'
      LIB_PATH: '{{.LIB_PATH | default "PATH_NOT_SPECIFIED"}}'
      CHANNELS: '{{.CHANNELS | default "PATH_NOT_SPECIFIED"}}'
      FMIMCL_LIB: '{{.FMIMCL_LIB | default "PATH_NOT_SPECIFIED"}}'
    cmds:
      - docker run --rm -v $(pwd):/workdir {{.FMI_IMAGE}}:{{.FMI_TAG}} gen-mcl
          --input {{.INPUT}}
          --output {{.OUTPUT}}
          --arch {{.ARCH}}
          --os {{.OS}}
          --fmu {{.LIB_PATH}}
          --dynlib {{.FMIMCL_LIB}}
          --channels '{{.CHANNELS}}'
    requires:
      vars: [INPUT, OUTPUT, LIB_PATH]
    sources:
      - '{{.PWD}}/{{.INPUT}}'
    generates:
      - '{{.PWD}}/{{.OUTPUT}}/**'

  gen-signalgroup:
    internal: true
    run: when_changed
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-signalgroup-{{.OUTPUT}}
    vars:
      INPUT: '{{.INPUT | default "INPUT_NOT_SPECIFIED"}}'
      OUTPUT: '{{.OUTPUT | default "OUTPUT_NOT_SPECIFIED"}}'
    cmds:
      - docker run --rm -v $(pwd):/workdir {{.FMI_IMAGE}}:{{.FMI_TAG}} gen-signalgroup
          --input {{.INPUT}}
          --output {{.OUTPUT}}
    requires:
      vars: [INPUT, OUTPUT]
    sources:
      - '{{.PWD}}/{{.INPUT}}'
    generates:
      - '{{.PWD}}/{{.OUTPUT}}/**'

  gen-fmu:
    internal: true
    run: always
    dir: '{{.USER_WORKING_DIR}}'
    label: dse:fmi:gen-fmu
    vars:
      SIM: '{{.SIM | default "SIM_NOT_SPECIFIED"}}'
      FMU_NAME: '{{.FMU_NAME | default "FMU_NAME_NOT_SPECIFIED"}}'
      PLATFORM: "{{if .PLATFORM}}--platform '{{.PLATFORM}}'{{else}}{{end}}"
      SIGNAL_GROUPS: "{{if .SIGNAL_GROUPS}}--signalgroups '{{.SIGNAL_GROUPS}}'{{else}}{{end}}"
      VERSION: "{{if .VERSION}}--version '{{.VERSION}}'{{else}}{{end}}"
      UUID: "{{if .UUID}}--uuid '{{.UUID}}'{{else}}{{end}}"
      OUT_DIR: '{{.OUT_DIR | default "out"}}'
    cmds:
      - docker run --rm -v $(pwd):/workdir {{.FMI_IMAGE}}:{{.FMI_TAG}} gen-fmu
          --sim {{.SIM}}
          --name {{.FMU_NAME}}
          --outdir {{.OUT_DIR}}
          {{.PLATFORM}}
          {{.SIGNAL_GROUPS}}
          {{.VERSION}}
          {{.UUID}}
    requires:
      vars: [SIM, FMU_NAME]
